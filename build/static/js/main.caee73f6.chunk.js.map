{"version":3,"sources":["GlobalStyle.js","images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/ErrorBoundary.js","components/Header/headerIndex.js","config.js","API.js","helpers.js","hooks/useHomeFetch.js","images/no_image.jpg","components/HeroImage/HeroImage.styles.js","components/HeroImage/heroImageIndex.js","components/Grid/Grid.styles.js","components/Grid/gridIndex.js","components/Spinner/spinnerIndex.js","components/Spinner/Spinner.styles.js","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/searchBarIndex.js","components/Button/Button.styles.js","components/Button/buttonIndex.js","components/Thumb/Thumb.styles.js","components/Thumb/thumbIndex.js","components/Home.js","components/NotFound.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/breadCrumbIndex.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/movieInfoIndex.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/movieInfoBarIndex.js","components/Actor/Actor.styles.js","components/Actor/actorIndex.js","components/Movie.js","hooks/useMovieFetch.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","ErrorBoundary","props","state","hasError","error","errorInfo","this","setState","console","log","toString","componentStack","children","React","Component","Header","to","src","RMDBLogo","alt","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","movieId","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","value","rating","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","total_results","image","Text","HeroImage","title","text","Grid","header","Spinner","SearchBar","setSearchTerm","useState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","e","currentTarget","button","Button","callBack","onClick","p","Image","Thumb","movieName","clickable","Home","setError","loading","setLoading","loadMore","setLoadMore","API","movies","prev","setItem","useHomeFetch","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","nanoid","NotFound","BreadCrumb","movieTitle","backdrop","MovieInfo","className","vote_average","directors","length","director","name","MovieInfoBar","budget","revenue","Actor","character","imageUrl","Movie","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","runtime","actor","profile_path","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.caee73f6.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    :root {\r\n        --maxWidth: 1280px;\r\n        --white: #fff;\r\n        --lightGrey: #eee;\r\n        --medGrey: #353535;\r\n        --darkGrey: #1c1c1c;\r\n        --fontSuperBig: 2.5rem;\r\n        --fontBig: 1.5rem;\r\n        --fontMed: 1.2rem;\r\n        --fontSmall: 1rem;\r\n    }\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: 'Abel', sans-serif;\r\n    }\r\n\r\n    body {\r\n        margin: 0;\r\n        padding: 0;\r\n\r\n        h1 {\r\n            font-size: 2rem;\r\n            font-weight: 600;\r\n            color: var(--white);\r\n        }\r\n\r\n        h3 {\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n        }\r\n\r\n        h1 {\r\n            font-size: 1rem;\r\n            color: var(--white);\r\n        }\r\n    }\r\n`;","export default __webpack_public_path__ + \"static/media/react-movie-logo.42955eb6.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.f15b6632.svg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    background: var(--darkGrey);\r\n    padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    max-width: var(--maxWidth);\r\n    padding: 20px 0;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const LogoImg = styled.img`\r\n    width: 200px;\r\n    @media screen and (max-width: 500px){\r\n        width: 150px;\r\n    }\r\n`;\r\n\r\nexport const TMDBLogoImg = styled.img`\r\n    width: 100px;\r\n    @media screen and (max-width: 500px){\r\n        width: 80px;\r\n    }\r\n`;\r\n","import React from 'react';\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { hasError: false, error: '', errorInfo: '' };\r\n    }\r\n  \r\n    static getDerivedStateFromError(error) {\r\n      // Update state so the next render will show the fallback UI.\r\n      return { hasError: true };\r\n    }\r\n  \r\n    componentDidCatch(error, errorInfo) {\r\n      // You can also log the error to an error reporting service\r\n      this.setState({\r\n        error: error,\r\n        errorInfo: errorInfo\r\n      });\r\n      console.log(error, errorInfo);\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        // You can render any custom fallback UI\r\n        return (\r\n          <div>\r\n            <h1>Something went terribly wrong.</h1>\r\n            <details >\r\n              {this.state.error && this.state.error.toString()}\r\n              <br/>\r\n              {this.state.errorInfo.componentStack}\r\n            </details>\r\n          </div>\r\n          \r\n        );\r\n      }\r\n  \r\n      return this.props.children; \r\n    }\r\n  }\r\n\r\n  // export default {ErrorBoundary};","import React from 'react';\r\nimport RMDBLogo from '../../images/react-movie-logo.svg';\r\nimport TMDBLogo from '../../images/tmdb_logo.svg';\r\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from './Header.styles';\r\nimport ErrorBoundary from '../ErrorBoundary';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => (\r\n    <Wrapper>\r\n        <Content>\r\n            <ErrorBoundary>\r\n                <Link to='/'>\r\n                    <LogoImg src={RMDBLogo} alt='rmdb-logo' />\r\n                </Link>\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n                <Link to='/'>\r\n                    <TMDBLogoImg src={TMDBLogo} alt='rmdb-logo' />\r\n                </Link>\r\n            </ErrorBoundary>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Header;","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData)\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken })\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value })\n      })\n    ).json();\n\n    return rating;\n  }\n};\n\nexport default apiSettings;\n","// Convert time to hours and minutes\nexport const calcTime = time => {\n  const hours = Math.floor(time / 60);\n  const mins = time % 60;\n  return `${hours}h ${mins}m`;\n};\n// Convert a number to money formatting\nexport const convertMoney = money => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  });\n  return formatter.format(money);\n};\n\nexport const isPersistedState = stateName => {\n  const sessionState = sessionStorage.getItem(stateName);\n  return sessionState && JSON.parse(sessionState);\n}\n","import {useState, useEffect} from 'react';\r\nimport API from '../API';\r\n\r\n//helpers\r\nimport { isPersistedState } from '../helpers';\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    results: [],\r\n    total_pages: 0,\r\n    total_results: 0\r\n};\r\n\r\nexport const useHomeFetch = () => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [error,setError] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [state, setState] = useState(initialState);\r\n    const [loadMore, setLoadMore] = useState(false);\r\n\r\n    const fetchMovies = async (page, searchTerm = '') => {\r\n        try{\r\n            setError(false);\r\n            setLoading(true);\r\n            \r\n            const movies = await API.fetchMovies(searchTerm,page);    \r\n            \r\n            setState(prev => ({\r\n                ...movies,\r\n                results:\r\n                    page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\r\n            }));\r\n        }catch(error){\r\n            console.log(error);\r\n            setError(true);\r\n        }finally{\r\n            setLoading(false);\r\n        }\r\n        \r\n    }\r\n    \r\n    console.log(state);\r\n\r\n    // Initial render (only runs once) and search\r\n    useEffect(() =>{\r\n        if (!searchTerm){\r\n            const sessionState = isPersistedState('homeState');\r\n            \r\n            if(sessionState) {\r\n                console.log('Grabbing from Session Storage');\r\n                setState(sessionState);\r\n                return;\r\n            }\r\n        }\r\n\r\n        console.log('Grabbing from API');\r\n        setState(initialState);\r\n        fetchMovies(1, searchTerm);\r\n    }, [searchTerm]);\r\n\r\n\r\n    // Load More\r\n    useEffect( () => {\r\n        if(!loadMore) return;\r\n        \r\n        fetchMovies(state.page + 1, searchTerm);\r\n        setLoadMore(false);\r\n    }, [loadMore, searchTerm, state.page]);\r\n\r\n    // Write to sessionStorage\r\n    useEffect(() => {\r\n        if(!searchTerm){\r\n            sessionStorage.setItem('homeState', JSON.stringify(state));\r\n        }\r\n    }, [searchTerm, state]);\r\n\r\n    return {state, loading, error, searchTerm, setSearchTerm, setLoadMore};\r\n};","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    background: linear-gradient(\r\n        to bottom, rgba(0,0,0,0)\r\n        41%, rgba(0,0,0,0.65)\r\n        100%\r\n    ),\r\n    url(${({image}) => image}), var(--darkGrey);\r\n    background-size: 100%, cover;\r\n    background-position: center;\r\n    height: 600px;\r\n    position: relative;\r\n    animation: animateHeroImage 1s;\r\n\r\n    @keyframes animateHeroImage {\r\n        from {\r\n            opacity: 0;\r\n        }\r\n        to {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    padding: 20px;\r\n    max-width: var(--maxWidth);\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const Text = styled.div`\r\n    z-index: 100;\r\n    max-width: 700px;\r\n    position: absolute;\r\n    bottom: 40px;\r\n    margin-right: 20px;\r\n    min-height: 100px;\r\n    color: var(--white);\r\n\r\n    h1 {\r\n        font-size: var(--fontSuperBig);\r\n\r\n        @media screen and (max-width: 720px){\r\n            font-size: var(--fontBig);\r\n        }\r\n    }\r\n\r\n    p {\r\n        font-size: var(--fontMed);\r\n\r\n        @media screen and (max-width: 720px){\r\n            font-size: var(--fontSmall);\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 720px){\r\n        max-width: 100;\r\n    }\r\n\r\n`;","import React from \"react\";\r\nimport {Wrapper, Content, Text} from './HeroImage.styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst HeroImage = ({image, title, text}) => (\r\n    <Wrapper image={image}>\r\n        <Content >\r\n            <Text>\r\n                <h1>{title}</h1>\r\n                <p>{text}</p>\r\n            </Text>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nHeroImage.propTypes = {\r\n    image: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired\r\n};\r\n\r\nexport default HeroImage;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: var(--maxWidth);\r\n    margin: 0 auto;\r\n    padding: 0 20px;\r\n    h1 {\r\n        color: var(--medGrey);\r\n\r\n        @media screen and (max-width: 768px){\r\n            font-size: var(--fontBig);\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n    grid-gap: 2rem;\r\n`;\r\n\r\n","import React from \"react\";\r\nimport {Wrapper, Content } from './Grid.styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Grid = ({header, children}) => (\r\n    <Wrapper>\r\n        <h1>{header}</h1>\r\n        <Content>{children}</Content>\r\n    </Wrapper>\r\n);\r\n\r\nGrid.propTypes = {\r\n    header: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Grid;","import { Spinner } from './Spinner.styles';\r\n\r\nexport default Spinner;","import styled from \"styled-components\";\r\n\r\nexport const Spinner = styled.div`\r\n    border: 5px solid var(--lightGrey);\r\n    border-top: 5px solid var(--medGrey);\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    animation: spin 0.8s linear infinite;\r\n    margin: 20px auto;\r\n\r\n    @keyframes spin {\r\n        0% {\r\n            transform: rotate(0deg);\r\n        }\r\n        100% {\r\n            transform: rotate(360deg);\r\n        }\r\n    }\r\n`;","export default __webpack_public_path__ + \"static/media/search-icon.cd820f5a.svg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    height: 100px;\r\n    background: var(--darkGrey);\r\n    padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    position: relative;\r\n    max-width: var(--maxWidth);\r\n    width: 100%;\r\n    height: 55px;\r\n    background: var(--medGrey);\r\n    margin: 0 auto;\r\n    border-radius: 40px;\r\n    color: var(--white);\r\n\r\n    img {\r\n        position: absolute;\r\n        left: 15px; \r\n        top: 14px;\r\n        width: 30px;\r\n    }\r\n\r\n    input {\r\n        font-size: 28px;\r\n        position: absolute;\r\n        left: 0px;\r\n        margin: 8px 0;\r\n        padding: 0 0 0 60px;\r\n        border: 0;\r\n        width: 95%;\r\n        background: transparent;\r\n        height: 40px;\r\n        color: var(--white);\r\n\r\n        :focus {\r\n            outline: none;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 720px){\r\n        input { font-size: 22px; }\r\n    }\r\n\r\n    @media screen and (max-width: 480px){\r\n        input { font-size: 18px; }\r\n    }\r\n\r\n`;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\n// Image\r\nimport searchIcon from '../../images/search-icon.svg';\r\n\r\nimport {Wrapper, Content} from './SearchBar.styles';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SearchBar = ({ setSearchTerm }) => {\r\n    const [state, setState] = useState('');\r\n    const initial = useRef(true);\r\n\r\n    useEffect(() => {\r\n        \r\n        if(initial.current){\r\n            initial.current = false;\r\n            return;\r\n        }\r\n\r\n        const timer = setTimeout( () => {\r\n            setSearchTerm(state);\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timer);\r\n\r\n    }, [setSearchTerm, state]);\r\n    \r\n    return (\r\n        <Wrapper>\r\n            <Content>\r\n                <img src={searchIcon} alt='search-icon' />\r\n                <input\r\n                    type='text'\r\n                    placeholder='Search Movie' \r\n                    onChange={e => setState(e.currentTarget.value)} \r\n                    value={state}/>\r\n            </Content>\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nSearchBar.propTypes = {\r\n    setSearchTerm: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SearchBar;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.button`\r\n    display: block;\r\n    background: var(--darkGrey);\r\n    width: 25%;\r\n    min-width: 200px;\r\n    height: 60px;\r\n    border-radius: 30px;\r\n    color: var(--white);\r\n    border: 0;\r\n    font-size: var(--fontBig);\r\n    margin: 20px auto;\r\n    transition: all 0.3s;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    :hover {\r\n        opacity: 0.8;\r\n    }\r\n`;","import React from 'react';\r\n// styled component\r\nimport { Wrapper } from './Button.styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = ({text, callBack}) => (\r\n    <Wrapper type=\"button\" onClick={callBack} >\r\n        {text}\r\n    </Wrapper>\r\n);\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    callBack: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Button;","import styled from 'styled-components';\r\n\r\nexport const Text = styled.p`\r\n    font-size: var(--fontMed);\r\n    color: var(--medGrey);\r\n    font-weight: bold;\r\n    position: relative;\r\n    text-align: center;\r\n    //margin-top: 0px;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n    width: 100%;\r\n    max-width: 480px;\r\n    transition: all 0.3s;\r\n    object-fit: cover;\r\n    border-radius: 20px;\r\n    animation: animateThumb 0.5s;\r\n\r\n    :hover {\r\n        opacity: 0.8;\r\n    }\r\n\r\n    @keyframes animateThumb {\r\n        from{\r\n            opacity: 0;\r\n        }\r\n        to {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;","import React from \"react\";\r\nimport { Image, Text } from \"./Thumb.styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Thumb = ({image, movieName, movieId, clickable}) => (\r\n    <div>\r\n        {clickable ? (\r\n            <Link to={`/${movieId}`}>\r\n                <Image src={image} alt='movie-thumb' />\r\n                <Text >{movieName}</Text>\r\n            </Link>\r\n        ) : (<Fragment>\r\n                <Image src={image} alt='movie-thumb' />\r\n                <Text >{movieName}</Text>\r\n            </Fragment>\r\n        )}\r\n    </div>\r\n);\r\n\r\nThumb.propTypes = {\r\n    image: PropTypes.string.isRequired,\r\n    movieId: PropTypes.number,\r\n    clickable: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default Thumb;","import React from \"react\";\r\n//config\r\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from '../config'\r\n//Hook\r\nimport { useHomeFetch } from '../hooks/useHomeFetch';\r\n//Image\r\nimport NoImage from '../images/no_image.jpg'\r\n//components\r\nimport HeroImage from \"./HeroImage/heroImageIndex\";\r\nimport Grid from '../components/Grid/gridIndex';\r\n//import Image from '../components/Thumb/thumbIndex';\r\nimport Spinner from '../components/Spinner/spinnerIndex';\r\nimport SearchBar from \"./SearchBar/searchBarIndex\";\r\nimport Button from \"../components/Button/buttonIndex\";\r\n\r\nimport { nanoid } from 'nanoid';\r\nimport Thumb from \"../components/Thumb/thumbIndex\";\r\n\r\n const Home = () => {\r\n    const {state, loading, error, searchTerm, setSearchTerm, setLoadMore} = useHomeFetch();\r\n\r\n    if(error) return <div>Something Went Wrong . . .</div>;\r\n    \r\n\r\n    return (\r\n        <>\r\n            {!searchTerm && state.results[0] ? (\r\n                <HeroImage image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n                            title={state.results[0].original_title}\r\n                            text={state.results[0].overview}\r\n                /> \r\n            )   : null}\r\n            <SearchBar setSearchTerm={setSearchTerm}/>\r\n            <Grid header={searchTerm ? 'Search Term: ' : 'Popular Movies'}>\r\n                {state.results.map(movie => (\r\n                    <Thumb\r\n                        key={nanoid()}\r\n                        movieName={movie.title}\r\n                        clickable\r\n                        image={\r\n                            movie.poster_path ? \r\n                                IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path \r\n                                : NoImage \r\n                        }\r\n                        movieId={movie.id}\r\n                        />\r\n                ))}\r\n            </Grid>\r\n            {loading && <Spinner /> }\r\n            {state.page < state.total_pages && !loading && \r\n                (<Button text='Load More' callBack={ () => setLoadMore(true)}/>)}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\n\r\nconst NotFound = () => <div>Not Found</div>;\r\n\r\nexport default NotFound;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 100%;\r\n    height: 70px;\r\n    background: var(--medGrey);\r\n    color: var(--withe);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    max-width: var(--maxWidth);\r\n    padding: 0 3%;\r\n\r\n    span {\r\n        font-size: var(--fontMed);\r\n        color: var(--white);\r\n        padding-right: 10px;\r\n\r\n        @media screen and (max-width: 768px){\r\n            font-size: var(--fontSmall);\r\n            padding-right: 5px;\r\n        }\r\n\r\n        @media screen and (max-width: 500px){\r\n            margin-left: 2%;\r\n        }\r\n    }\r\n`;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Wrapper, Content } from \"../BreadCrumb/BreadCrumb.styles\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BreadCrumb = ({ movieTitle }) => (\r\n    <Wrapper>\r\n        <Content>\r\n            <Link to='/'>\r\n                <span>Home</span>\r\n            </Link>\r\n            <span>|</span>\r\n            <span>{movieTitle}</span>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nBreadCrumb.propTypes = {\r\n    movieTitle: PropTypes.string.isRequired\r\n};\r\n\r\nexport default BreadCrumb;","import styled from \"styled-components\";\r\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from \"../../config\";\r\n\r\nexport const Wrapper = styled.div`\r\n    background: ${({ backdrop }) =>\r\n        backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : '#000' };\r\n        background-size: cover;\r\n        background-position: center;\r\n        padding: 40px 20px;\r\n        animation: animateMovieInfo 1s;\r\n\r\n        @keyframes animateMovieInfo {\r\n            from {\r\n                opacity: 0;\r\n            }\r\n            to {\r\n                opacity: 1;\r\n            }\r\n        }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    max-width: var(--maxWidth);\r\n    margin: 0 auto;\r\n    background: rgba(0, 0, 0, 0.7);\r\n    border-radius: 20px;\r\n\r\n    @media screen and (max-width: 768px){\r\n        display: block;\r\n        max-height: none;\r\n        max-width: 480px;\r\n\r\n        h1 {\r\n            margin-top: 0;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 420px){\r\n        max-width: 320px;\r\n    }\r\n\r\n`;\r\n\r\nexport const Text = styled.div`\r\n    width: 100%;\r\n    padding: 20px 40px;\r\n    color: var(--white);\r\n    overflow: hidden;\r\n\r\n    .rating-directors {\r\n        display: flex;\r\n        justify-content: flex-start;\r\n    }\r\n\r\n    .score {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 35px;\r\n        height: 35px;\r\n        background: var(--white);\r\n        color: #000;\r\n        font-weight: 800;\r\n        border-radius: 50%;\r\n        margin: 0;\r\n    }\r\n\r\n\r\n    @media screen and (max-width: 420px){\r\n        h1 {\r\n            font-size: var(--fontMed);\r\n        }\r\n        \r\n        p, h3 {\r\n            font-size: var(--fontSmall);\r\n        }\r\n    }\r\n\r\n    .director {\r\n        margin: 0 0 0 40px;\r\n\r\n        p {\r\n            margin: 0;\r\n        }\r\n\r\n        h1 {\r\n            @media screen and (max-width: 768px){\r\n                font-size: var(--fontBig);\r\n            }\r\n        }\r\n    }\r\n`;","import React from \"react\";\r\nimport { Wrapper, Content, Text } from '../MovieInfo/MovieInfo.styles';\r\nimport Thumb from \"../Thumb/thumbIndex\";\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../../config\";\r\nimport NoImage from '../../images/no_image.jpg';\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MovieInfo = ({ movie }) => (\r\n    <Wrapper backdrop={movie.backdrop_path}>\r\n        <Content>\r\n            <Thumb className=\"thumb\"\r\n                image={movie.poster_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\r\n                : NoImage} \r\n                clickable={false} \r\n                alt='movie-thumb'   \r\n            />\r\n            <Text>\r\n                <h1>{movie.title}</h1>\r\n                <h3>PLOT</h3>\r\n                <p>{movie.overview}</p>\r\n\r\n                <div className=\"rating-directors\">\r\n                    <div>\r\n                        <h3>RATING</h3>\r\n                        <div className=\"score\">\r\n                            {movie.vote_average}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"director\"> \r\n                        <h3>\r\n                            DIRECTOR{movie.directors.length > 1 ? 'S' : ''}\r\n                        </h3>\r\n                        <div >\r\n                            {movie.directors.map(director => (\r\n                                <p key={nanoid()}>{director.name}</p>\r\n                            ))}\r\n                        </div> \r\n                    </div>\r\n                </div>\r\n            </Text>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nMovieInfo.propTypes = {\r\n    movie: PropTypes.object.isRequired\r\n};\r\n\r\nexport default MovieInfo;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    min-height: 100px;\r\n    background: var(--darkGrey);\r\n    padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    max-width: var(--maxWidth);\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    color: var(--white);\r\n\r\n    .column {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        background: var(--medGrey);\r\n        border-radius: 20px;\r\n        margin: 0 20px;\r\n        flex: 1;\r\n\r\n        :first-child {\r\n            margin-left: 0;\r\n        }\r\n        :last-child {\r\n            margin-right: 0;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 768px) {\r\n        display: block;\r\n        .column {\r\n            margin: 20px 0;\r\n        }\r\n    }\r\n`;","import React from \"react\";\r\n// helpers\r\nimport { calcTime, convertMoney } from '../../helpers';\r\nimport { Wrapper, Content } from \"./MovieInfoBar.styles\";\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MovieInfoBar = ({ time, budget, revenue }) => (\r\n\r\n    <Wrapper>\r\n        <Content>\r\n            <div className=\"column\">\r\n                <p>Running time: {calcTime(time)}</p>\r\n            </div>\r\n            <div className=\"column\">\r\n                <p>Budget: {convertMoney(budget)}</p>\r\n            </div>\r\n            <div className=\"column\">\r\n                <p>Revenue: {convertMoney(revenue)}</p>\r\n            </div>\r\n        </Content>\r\n    </Wrapper>\r\n    \r\n);\r\n\r\nMovieInfoBar.propTypes = {\r\n    time: PropTypes.number.isRequired,\r\n    budget: PropTypes.number.isRequired,\r\n    revenue: PropTypes.number.isRequired\r\n};\r\n\r\nexport default MovieInfoBar;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    color: var(--white);\r\n    background: var(--darkGrey);\r\n    border-radius: 20px;\r\n    padding: 5px;\r\n    text-align: center;\r\n\r\n    h3 {\r\n        margin: 10px 0 0 0;\r\n    }\r\n\r\n    p {\r\n        margin: 5px 0;\r\n    }\r\n\r\n    @media screen and (max-width: 500px){\r\n        margin: 0 20%;\r\n    }\r\n`;\r\n\r\nexport const Image = styled.img`\r\n    display: block;\r\n    width: 100%;\r\n    height: 200px;\r\n    object-fit: cover;\r\n    border-radius: 15px;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Image } from './Actor.styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Actor = ({ name, character, imageUrl }) => (\r\n    <Wrapper>\r\n        <Image \r\n            src={imageUrl} \r\n            alt='actor-thumb'\r\n        />\r\n        <h3>{name}</h3>\r\n        <p>{character}</p> \r\n        \r\n    </Wrapper>\r\n);\r\n\r\nActor.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    character: PropTypes.string.isRequired,\r\n    imageUrl: PropTypes.string\r\n};\r\n\r\nexport default Actor;","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n// Config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../config\";\r\n// Components\r\nimport Grid from '../components/Grid/gridIndex';\r\nimport Spinner from '../components/Spinner/spinnerIndex';\r\nimport BreadCrumb from \"./BreadCrumb/breadCrumbIndex\";\r\nimport MovieInfo from \"./MovieInfo/movieInfoIndex\";\r\nimport MovieInfoBar from \"./MovieInfoBar/movieInfoBarIndex\";\r\nimport Actor from \"./Actor/actorIndex\";\r\n// Hook\r\nimport { useMovieFetch } from '../hooks/useMovieFetch';\r\n// Image\r\nimport NoImage from '../images/no_image.jpg'\r\nimport { nanoid } from \"nanoid\";\r\n\r\nconst Movie = () => {\r\n    const { movieId } = useParams();\r\n    const { state: movie, loading, error } = useMovieFetch(movieId);\r\n    \r\n    if(loading) return <Spinner />\r\n\r\n    if(error) return <div>Something went wrong . . .</div>\r\n\r\n    return (\r\n        <>\r\n            <BreadCrumb movieTitle={movie.original_title} />\r\n            <MovieInfo movie={movie} />\r\n            <MovieInfoBar \r\n                time={movie.runtime} \r\n                budget={movie.budget} \r\n                revenue={movie.revenue} \r\n            />\r\n            <Grid header='Actors'>\r\n                {movie.actors.map(actor => (\r\n                    <Actor \r\n                        key={nanoid()} \r\n                        name={actor.name}\r\n                        character={actor.character}\r\n                        imageUrl={\r\n                            actor.profile_path ?\r\n                            `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n                            : NoImage\r\n                        }\r\n                    />\r\n                ))}\r\n            </Grid>\r\n\r\n        </>\r\n    );\r\n    \r\n};\r\n\r\nexport default Movie;","import { useState, useEffect } from 'react';\r\nimport API from '../API';\r\nimport { isPersistedState } from '../helpers';\r\n\r\nexport const useMovieFetch = movieId => {\r\n    const [state, setState] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchMovie = async () => {\r\n            try {\r\n                setError(false);\r\n                setLoading(true);\r\n    \r\n                const movie = await API.fetchMovie(movieId);\r\n                const credits = await API.fetchCredits(movieId);\r\n    \r\n                // get director\r\n                const directors = credits.crew.filter(\r\n                    member => member.job === 'Director'\r\n                );\r\n    \r\n    \r\n                setState({\r\n                    ...movie,\r\n                    actors: credits.cast,\r\n                    directors\r\n                });\r\n    \r\n            }catch(error){\r\n                setError(true);\r\n            }finally{\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        const sessionState = isPersistedState(movieId);\r\n        if(sessionState){\r\n            setState(sessionState);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        fetchMovie();\r\n    }, [movieId]);\r\n\r\n    useEffect(() => {\r\n        sessionStorage.setItem(movieId, JSON.stringify(state));\r\n    },[movieId, state]);\r\n\r\n    return { state, loading, error };\r\n}","import React from 'react';\n// Routing\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\nimport {GlobalStyle} from './GlobalStyle'\nimport Header from './components/Header/headerIndex.js';\nimport Home from './components/Home';\nimport NotFound from './components/NotFound';\nimport Movie from './components/Movie';\n\nconst App = () => (\n      <Router >\n        <Header/>\n        <Routes>\n          <Route path='/' element={<Home />} />\n          <Route path='/*' element={<NotFound />}/>\n          <Route path='/:movieId/' element={<Movie />} />\n        </Routes>\n        <GlobalStyle/>\n      </Router>\n  );\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}